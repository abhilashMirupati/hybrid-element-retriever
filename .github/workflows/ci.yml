name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy
    
    - name: Format check with black
      run: black --check src/ tests/
    
    - name: Lint with flake8  
      run: flake8 src/ tests/
    
    - name: Type check with mypy
      run: mypy src/ --ignore-missing-imports
    
    - name: Check for TODOs and stubs
      run: |
        ! git grep -n -E '\.\.\.|\\bTODO\\b|\\bstub\\b' src/ tests/

  test-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y chromium-browser
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest-cov pytest-timeout pytest-xdist
    
    - name: Install Playwright
      run: python -m playwright install chromium
    
    - name: Install models (optional)
      run: |
        if [ -f scripts/install_models.sh ]; then
          bash scripts/install_models.sh
        fi
      continue-on-error: true
    
    - name: Run tests with coverage
      run: |
        pytest tests/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=85 \
          --timeout=300 \
          -n auto \
          -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-linux-${{ matrix.python-version }}

  test-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest pytest-cov pytest-timeout
    
    - name: Install Playwright
      run: python -m playwright install chromium
    
    - name: Install models (optional)
      run: |
        if (Test-Path scripts\install_models.ps1) {
          .\scripts\install_models.ps1
        }
      continue-on-error: true
      shell: pwsh
    
    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=src --cov-fail-under=85 --timeout=300 -v

  build:
    runs-on: ubuntu-latest
    needs: [quality, test-linux]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
    
    - name: Build Python package
      run: |
        python -m build
    
    - name: Check package
      run: |
        pip install twine
        twine check dist/*
    
    - name: Build Java JAR
      run: |
        cd java
        mvn clean package
      continue-on-error: true
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: |
          dist/
          java/target/*.jar