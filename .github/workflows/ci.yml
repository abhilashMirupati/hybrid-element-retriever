name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install black flake8 mypy
          pip install -e .[dev]
      
      - name: Check code formatting with black
        run: black --check src tests
      
      - name: Lint with flake8
        run: flake8 src tests
      
      - name: Type check with mypy
        run: mypy src

  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e .[dev,ml]
        shell: bash
      
      - name: Install Playwright
        run: |
          python -m playwright install chromium
          python -m playwright install-deps chromium
        shell: bash
      
      - name: Run tests with coverage
        run: |
          pytest tests --cov=src --cov-report=xml --cov-report=term --cov-fail-under=80
        shell: bash
      
      - name: Upload coverage reports
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
  
  build:
    name: Build distribution
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel build
      
      - name: Build wheel and sdist
        run: python -m build
      
      - name: Check distribution
        run: |
          pip install twine
          twine check dist/*
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-distributions
          path: dist/
  
  build-java:
    name: Build Java wrapper
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      
      - name: Build with Maven
        run: |
          cd java
          mvn clean package
      
      - name: Upload JAR
        uses: actions/upload-artifact@v3
        with:
          name: java-jar
          path: java/target/*.jar

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      
      - name: Download built distributions
        uses: actions/download-artifact@v3
        with:
          name: python-distributions
          path: dist/
      
      - name: Install package from wheel
        run: |
          pip install dist/*.whl[ml]
          pip install playwright pytest
      
      - name: Install Playwright browsers
        run: |
          python -m playwright install chromium
          python -m playwright install-deps chromium
      
      - name: Install models
        run: |
          # Try to install models (may fail if deps missing)
          bash scripts/install_models.sh || echo "Model installation skipped"
      
      - name: Test CLI
        run: |
          # Test that CLI is installed
          her --help
          
          # Test cache command
          her cache --clear || echo "Cache clear skipped"
      
      - name: Run integration tests
        run: |
          # Create a simple integration test
          cat > test_integration.py << 'EOF'
          import sys
          from her.cli_api import HybridClient
          
          def test_client_creation():
              client = HybridClient(headless=True)
              assert client is not None
              client.close()
              print("✓ Client creation test passed")
          
          if __name__ == "__main__":
              try:
                  test_client_creation()
                  sys.exit(0)
              except Exception as e:
                  print(f"✗ Integration test failed: {e}")
                  sys.exit(1)
          EOF
          
          python test_integration.py